{"version":3,"sources":["components/InputField.js","components/Form.js","components/Section.js","components/Contact.js","components/Education.js","components/Experience.js","App.js","index.js"],"names":["InputField","props","className","htmlFor","name","label","type","onChange","value","required","Form","display","onSubmit","formAttrs","map","formAttr","text","formInputs","formButtonText","Section","getEducationInfo","info","universityName","degree","startDate","endDate","description","onClick","delete","id","changeDisplay","getExperienceInfo","position","companyName","Fragment","contactInfo","firstName","lastName","email","containerInfo","event","Contact","state","formAttributes","input","displayContact","bind","preventDefault","this","setState","target","handleChange","handleSubmit","Component","Education","educationInfo","uniqid","displayForm","displayEducation","newInfo","filter","education","find","currentInfo","changeEditDisplay","handleDeleteClick","handleEditChange","handleEditSubmit","Experience","experienceInfo","displayExperience","experience","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c742978d.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"../styles/App.css\";\r\nimport \"../styles/InputField.css\";\r\n\r\nconst InputField = (props) => {\r\n    return (\r\n        <div className=\"flx-col mar-15 input-field-box\">\r\n            <label \r\n                className=\"text-left\"\r\n                htmlFor={props.name}\r\n            >\r\n                {props.label}\r\n            </label>\r\n            <input \r\n                className=\"input-field\"\r\n                type={props.type}\r\n                onChange={props.onChange} \r\n                value={props.value}\r\n                name={props.name}\r\n                required \r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default InputField;","import React from 'react';\r\nimport InputField from './InputField.js';\r\nimport '../styles/Form.css';\r\n\r\nconst Form = (props) => {\r\n    return (\r\n        <div \r\n            className={props.display ? 'show' : 'hide'}\r\n        >\r\n            <form \r\n                onSubmit={props.onSubmit}\r\n            >\r\n                {props.formAttrs.map(formAttr => {\r\n                    return (\r\n                        <InputField\r\n                            name={formAttr.name}\r\n                            type={formAttr.text}\r\n                            onChange={props.onChange}\r\n                            value={props.formInputs[formAttr.name]}\r\n                            label={formAttr.label}\r\n                        />\r\n                    )\r\n                })}\r\n                <button\r\n                    className=\"submit-button\" \r\n                    type=\"submit\"\r\n                >\r\n                    {props.formButtonText}\r\n                </button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Form;","import React from 'react';\r\nimport Form from './Form.js';\r\nimport {FaRegTimesCircle, FaPen} from \"react-icons/fa\";\r\nimport \"../styles/Section.css\"\r\n\r\nconst Section = (props) => {\r\n    function getSectionInfo () {\r\n        return (\r\n            <React.Fragment>\r\n                <div className=\"flx-row just-center\">\r\n                    <div>\r\n                        <h2>\r\n                            {props.contactInfo.firstName} {props.contactInfo.lastName}\r\n                        </h2>\r\n                        <p>{props.contactInfo.email}</p>\r\n                    </div>\r\n                    <div>\r\n                        <FaPen\r\n                            className=\"click-button\"\r\n                            onClick={props.changeDisplay}\r\n                        />\r\n                    </div>\r\n                </div>\r\n                <div>\r\n                    <Form \r\n                        formButtonText=\"Change Contact\"\r\n                        formAttrs={props.formAttrs}\r\n                        formInputs={props.formInputs}\r\n                        onChange={props.onChange}\r\n                        onSubmit={props.onSubmit} \r\n                        display={props.display} \r\n                    /> \r\n                </div>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n\r\n    function getEducationInfo (info) {\r\n        return (\r\n            <div className=\"flx-row just-space\">\r\n                <div className=\"text-left\">\r\n                    <p>{info.universityName}, {info.degree}</p>\r\n                    <p>{info.startDate} - {info.endDate}</p>\r\n                    <p>{info.description}</p>\r\n                </div>\r\n                <div>\r\n                    <FaRegTimesCircle \r\n                        className=\"click-button\"\r\n                        onClick={() => {\r\n                            props.delete(info.id)}\r\n                        }\r\n                        />\r\n                    <FaPen\r\n                        className=\"click-button\"\r\n                        onClick={() => {\r\n                            props.changeDisplay(info.id)}\r\n                        }\r\n                    />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    function getExperienceInfo (info) {\r\n        return (\r\n            <div className=\"flx-row just-space section-box\">\r\n                <div className=\"text-left\">\r\n                    <p>{info.position} at {info.companyName}</p>\r\n                    <p>{info.startDate} - {info.endDate}</p>\r\n                    <p>{info.description}</p>\r\n                </div>\r\n                <div>\r\n                    <FaRegTimesCircle \r\n                        className=\"click-button\"\r\n                        onClick={() => {\r\n                            props.delete(info.id)}\r\n                        }\r\n                        />\r\n                    <FaPen\r\n                        className=\"click-button\"\r\n                        onClick={() => {\r\n                            props.changeDisplay(info.id)}\r\n                        }\r\n                    />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            {props.type === \"contact\" ? getSectionInfo() : \r\n                props.containerInfo.map(info => {\r\n                    return (\r\n                        <div id={info.id} className=\"section-box\">\r\n                            {props.type === \"education\" ? \r\n                                getEducationInfo(info) :\r\n                                getExperienceInfo(info)\r\n                            }\r\n                            <div>\r\n                                <Form\r\n                                    formButtonText={props.formButtonText}\r\n                                    formAttrs={props.formAttrs}\r\n                                    formInputs={info.formInputs}\r\n                                    onChange={(event) => {\r\n                                        props.onChange(event, info.id)\r\n                                    }}\r\n                                    onSubmit={(event) => {\r\n                                        props.onSubmit(event, info.id)\r\n                                    }} \r\n                                    display={info.display} \r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                })\r\n            }\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default Section;","import React, { Component } from 'react';\r\nimport Section from \"./Section.js\";\r\n\r\nclass Contact extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            formAttributes: [\r\n                {\r\n                    name: \"firstName\",\r\n                    type: \"text\",\r\n                    label: \"First Name: \",\r\n                    input: \"Edit First Name!\",\r\n                },\r\n                {\r\n                    name: \"lastName\",\r\n                    type: \"text\",\r\n                    label: \"last Name: \",\r\n                    input: \"Edit First Name\"\r\n                },\r\n                {\r\n                    name: \"email\",\r\n                    type: \"text\",\r\n                    label: \"Email Address: \",\r\n                    input: \"Edit Email Address! \"\r\n                }\r\n            ],\r\n            formInputs: {\r\n                firstName: 'First',\r\n                lastName: 'Last',\r\n                email: 'Email@email.com'\r\n            },\r\n            contactInfo: {\r\n                firstName: 'First',\r\n                lastName: 'Last',\r\n                email: 'Email@email.com'\r\n            },\r\n            displayContact: false\r\n        };\r\n        \r\n        this.changeDisplay = this.changeDisplay.bind(this);\r\n    }\r\n\r\n    handleChange(event) {\r\n        event.preventDefault();\r\n        this.setState ({\r\n            formInputs: {...this.state.formInputs, \r\n                [event.target.name]: event.target.value\r\n            }\r\n        });\r\n    }\r\n\r\n    handleSubmit(event) {\r\n        event.preventDefault();\r\n        this.setState ({\r\n            contactInfo: {firstName: this.state.formInputs.firstName, \r\n                          lastName: this.state.formInputs.lastName, \r\n                          email: this.state.formInputs.email}\r\n        });\r\n        this.changeDisplay();\r\n    }\r\n\r\n    changeDisplay() {\r\n        this.setState({\r\n            displayContact: !this.state.displayContact\r\n        });\r\n    }\r\n\r\n    \r\n\r\n    render () {\r\n        return (\r\n            <div>\r\n                <Section \r\n                    contactInfo={this.state.contactInfo} \r\n                    formButtonText=\"Change Contact\"\r\n                    formAttrs={this.state.formAttributes}\r\n                    formInputs={this.state.formInputs}\r\n                    onChange={this.handleChange.bind(this)}\r\n                    onSubmit={this.handleSubmit.bind(this)} \r\n                    changeDisplay={this.changeDisplay} \r\n                    display={this.state.displayContact} \r\n                    type=\"contact\"\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Contact;","import React, { Component } from 'react';\r\nimport Form from './Form.js';\r\nimport Section from './Section.js';\r\nimport uniqid from \"uniqid\";\r\nimport { RiAddCircleLine } from \"react-icons/ri\";\r\nimport \"../styles/Section.css\";\r\n\r\nclass Education extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            formAttributes: [\r\n                {\r\n                    name: \"universityName\",\r\n                    type: \"text\",\r\n                    label: \"University Name: \"\r\n                },\r\n                {\r\n                    name: \"degree\",\r\n                    type: \"text\",\r\n                    label: \"Degree: \"\r\n                },\r\n                {\r\n                    name: \"startDate\",\r\n                    type: \"text\",\r\n                    label: \"Start Date: \"\r\n                },\r\n                {\r\n                    name: \"endDate\",\r\n                    type: \"text\",\r\n                    label: \"End Date: \"\r\n                },\r\n                {\r\n                    name: \"description\",\r\n                    type: \"text\",\r\n                    label: \"Description: \"\r\n                }\r\n            ],\r\n            formInputs: {\r\n                universityName: '', \r\n                degree: '', \r\n                startDate: '',\r\n                endDate: '', \r\n                description: ''\r\n            },\r\n            educationInfo: [\r\n                {\r\n                 formInputs: {\r\n                    universityName: 'UC Davis', \r\n                    degree: 'Computer Science', \r\n                    startDate: '2018',\r\n                    endDate: '2021', \r\n                    description: 'Completed with GPA of 3.00.'\r\n                 },\r\n                 id: uniqid(),\r\n                 universityName: 'University Name',\r\n                 degree: 'Degree',\r\n                 startDate: 'Sep 2014',\r\n                 endDate: 'Jun 2018', \r\n                 description: 'Completed School',\r\n                 displayForm: false}\r\n            ],\r\n            \r\n            displayEducation: false\r\n        };\r\n    }\r\n\r\n    handleDeleteClick(id) {\r\n        let newInfo = this.state.educationInfo.filter(education => \r\n                            education.id !== id);\r\n        this.setState({\r\n            educationInfo: newInfo\r\n        })\r\n    }\r\n\r\n    handleEditChange(event, id) {\r\n        let newInfo = this.state.educationInfo;\r\n        let currentInfo = newInfo.find(info => info.id === id);\r\n        currentInfo.formInputs[event.target.name] = event.target.value;\r\n        this.setState({\r\n            educationInfo: newInfo\r\n        })\r\n    }\r\n\r\n    handleChange(event) {\r\n        event.preventDefault();\r\n        this.setState ({\r\n            formInputs: {...this.state.formInputs, \r\n                [event.target.name]: event.target.value\r\n            }\r\n        });\r\n    }\r\n\r\n    handleSubmit(event) {\r\n        event.preventDefault();\r\n        this.setState ({\r\n            educationInfo: [ ...this.state.educationInfo,\r\n                          { \r\n                            formInputs: {\r\n                                universityName: this.state.formInputs.universityName, \r\n                                degree: this.state.formInputs.degree, \r\n                                startDate: this.state.formInputs.startDate, \r\n                                endDate: this.state.formInputs.endDate, \r\n                                description: this.state.formInputs.description,\r\n                            },\r\n                            id: uniqid(),\r\n                            universityName: this.state.formInputs.universityName, \r\n                            degree: this.state.formInputs.degree, \r\n                            startDate: this.state.formInputs.startDate, \r\n                            endDate: this.state.formInputs.endDate, \r\n                            description: this.state.formInputs.description,\r\n                            display: false\r\n                          }]\r\n        });\r\n        this.changeDisplay();\r\n    }\r\n\r\n    handleEditSubmit(event, id) {\r\n        event.preventDefault();\r\n        let newInfo = this.state.educationInfo;\r\n        let currentInfo = newInfo.find(info => info.id === id);\r\n        currentInfo.universityName = currentInfo.formInputs.universityName;\r\n        currentInfo.degree = currentInfo.formInputs.degree;\r\n        currentInfo.startDate = currentInfo.formInputs.startDate;\r\n        currentInfo.endDate = currentInfo.formInputs.endDate;\r\n        currentInfo.description = currentInfo.formInputs.description;\r\n        this.setState({\r\n            educationInfo: newInfo\r\n        })\r\n        this.changeEditDisplay(id);\r\n    }\r\n\r\n    changeDisplay() {\r\n        this.setState({\r\n            displayEducation: !this.state.displayEducation\r\n        });\r\n    }\r\n\r\n    changeEditDisplay(id) {\r\n        let newInfo = this.state.educationInfo;\r\n        let currentInfo = newInfo.find(info => info.id === id);\r\n        currentInfo.display = !currentInfo.display\r\n        this.setState({\r\n            educationInfo: newInfo\r\n        })\r\n    }\r\n\r\n    render () {\r\n        return (\r\n            <div className=\"mar-15\">\r\n                <div className=\"border-bot text-left pad-10\">\r\n                    <h3>EDUCATION</h3>\r\n                </div>\r\n                <Section\r\n                    formButtonText=\"Change Education\"\r\n                    delete={this.handleDeleteClick.bind(this)}\r\n                    onChange={this.handleEditChange.bind(this)}\r\n                    onSubmit={this.handleEditSubmit.bind(this)}\r\n                    changeDisplay={this.changeEditDisplay.bind(this)}\r\n                    containerInfo={this.state.educationInfo}\r\n                    formAttrs={this.state.formAttributes}\r\n                    type=\"education\"\r\n                />\r\n                <RiAddCircleLine\r\n                    className=\"pad-10 click-button\"\r\n                    onClick={this.changeDisplay.bind(this)} \r\n                />\r\n                <Form \r\n                    formButtonText=\"Add Education\"\r\n                    formAttrs={this.state.formAttributes}\r\n                    formInputs={this.state.formInputs}\r\n                    onChange={this.handleChange.bind(this)}\r\n                    onSubmit={this.handleSubmit.bind(this)} \r\n                    display={this.state.displayEducation} \r\n                />               \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Education;","import React, { Component } from 'react';\r\nimport Form from './Form.js';\r\nimport Section from './Section.js';\r\nimport uniqid from \"uniqid\";\r\nimport { RiAddCircleLine } from \"react-icons/ri\";\r\n\r\n\r\nclass Experience extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            formAttributes: [\r\n                {\r\n                    name: \"position\",\r\n                    type: \"text\",\r\n                    label: \"Position: \",\r\n                    input: \"Add Position!\",\r\n                },\r\n                {\r\n                    name: \"companyName\",\r\n                    type: \"text\",\r\n                    label: \"Company Name: \",\r\n                    input: \"Add Company Name!\"\r\n                },\r\n                {\r\n                    name: \"startDate\",\r\n                    type: \"text\",\r\n                    label: \"Start Date: \",\r\n                    input: \"Add Start Date!\"\r\n                },\r\n                {\r\n                    name: \"endDate\",\r\n                    type: \"text\",\r\n                    label: \"End Date: \",\r\n                    input: \"Add End Date!\"\r\n                },\r\n                {\r\n                    name: \"description\",\r\n                    type: \"text\",\r\n                    label: \"Description: \",\r\n                    input: \"Add Description!\"\r\n                }\r\n            ],\r\n            formInputs: {\r\n                position: '', \r\n                companyName: '', \r\n                startDate: '',\r\n                endDate: '', \r\n                description: ''\r\n            },\r\n            experienceInfo: [\r\n                {formInputs: {\r\n                    position: 'Coder', \r\n                    companyName: 'Coder Coding', \r\n                    startDate: '2018',\r\n                    endDate: '2021', \r\n                    description: 'A coder in coding.'\r\n                 },\r\n                 id: uniqid(),\r\n                 position: 'Position Name', \r\n                 companyName: 'Company Name', \r\n                 startDate: 'Jan 2021',\r\n                 endDate: 'Jan 2021', \r\n                 description: 'Description about position.',\r\n                 display: false}\r\n            ],\r\n            displayExperience: false\r\n        };\r\n        \r\n        this.changeDisplay = this.changeDisplay.bind(this);\r\n    }\r\n\r\n    handleDeleteClick(id) {\r\n        let newInfo = this.state.experienceInfo.filter(experience => \r\n                            experience.id !== id);\r\n        this.setState({\r\n            experienceInfo: newInfo\r\n        })\r\n    }\r\n\r\n    handleEditChange(event, id) {\r\n        let newInfo = this.state.experienceInfo;\r\n        let currentInfo = newInfo.find(info => info.id === id);\r\n        currentInfo.formInputs[event.target.name] = event.target.value;\r\n        this.setState({\r\n            experienceInfo: newInfo\r\n        })\r\n    }\r\n\r\n    handleChange(event) {\r\n        event.preventDefault();\r\n        this.setState ({\r\n            formInputs: {...this.state.formInputs, \r\n                [event.target.name]: event.target.value\r\n            }\r\n        });\r\n    }\r\n\r\n    handleSubmit(event) {\r\n        event.preventDefault();\r\n        this.setState ({\r\n            experienceInfo: [ ...this.state.experienceInfo,\r\n                          { formInputs: {\r\n                                position: this.state.formInputs.position, \r\n                                companyName: this.state.formInputs.companyName, \r\n                                startDate: this.state.formInputs.startDate, \r\n                                endDate: this.state.formInputs.endDate, \r\n                                description: this.state.formInputs.description\r\n                            },\r\n                            position: this.state.formInputs.position, \r\n                            companyName: this.state.formInputs.companyName, \r\n                            startDate: this.state.formInputs.startDate, \r\n                            endDate: this.state.formInputs.endDate, \r\n                            description: this.state.formInputs.description }]\r\n        });\r\n        this.changeDisplay();\r\n    }\r\n\r\n    handleEditSubmit(event, id) {\r\n        event.preventDefault();\r\n        let newInfo = this.state.experienceInfo;\r\n        let currentInfo = newInfo.find(info => info.id === id);\r\n        currentInfo.position = currentInfo.formInputs.position;\r\n        currentInfo.companyName = currentInfo.formInputs.companyName;\r\n        currentInfo.startDate = currentInfo.formInputs.startDate;\r\n        currentInfo.endDate = currentInfo.formInputs.endDate;\r\n        currentInfo.description = currentInfo.formInputs.description;\r\n        this.setState({\r\n            experienceInfo: newInfo\r\n        })\r\n        this.changeEditDisplay(id);\r\n    }\r\n\r\n    changeDisplay() {\r\n        this.setState({\r\n            displayExperience: !this.state.displayExperience\r\n        });\r\n    }\r\n\r\n    changeEditDisplay(id) {\r\n        let newInfo = this.state.experienceInfo;\r\n        let currentInfo = newInfo.find(info => info.id === id);\r\n        currentInfo.display = !currentInfo.display\r\n        this.setState({\r\n            experienceInfo: newInfo\r\n        })\r\n    }\r\n\r\n    render () {\r\n        return (\r\n            <div className=\"mar-15\">\r\n                <div className=\"border-bot text-left pad-10\">\r\n                    <h3>EXPERIENCE</h3>\r\n                </div>\r\n                <Section\r\n                    formButtonText=\"Change Experience\"\r\n                    delete={this.handleDeleteClick.bind(this)}\r\n                    onChange={this.handleEditChange.bind(this)}\r\n                    onSubmit={this.handleEditSubmit.bind(this)}\r\n                    changeDisplay={this.changeEditDisplay.bind(this)}\r\n                    containerInfo={this.state.experienceInfo}\r\n                    formAttrs={this.state.formAttributes}\r\n                    type=\"experience\"\r\n                />\r\n                <RiAddCircleLine\r\n                    className=\"pad-10 click-button\"\r\n                    onClick={this.changeDisplay.bind(this)} \r\n                />\r\n                <Form \r\n                    formButtonText=\"Add Experience\"\r\n                    formAttrs={this.state.formAttributes}\r\n                    formInputs={this.state.formInputs}\r\n                    onChange={this.handleChange.bind(this)}\r\n                    onSubmit={this.handleSubmit.bind(this)} \r\n                    display={this.state.displayExperience} \r\n                /> \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Experience;","  import React, { Component } from 'react';\nimport Contact from './components/Contact.js';\nimport Education from './components/Education.js';\nimport Experience from './components/Experience.js';\nimport './styles/App.css';\n\nclass App extends Component {\n  render () {\n    return (\n        <div id=\"app\">\n            <div id=\"title-container\" className=\"mar-45\">\n                <h1>CV Builder</h1>\n            </div>\n            <div id=\"resume-builder\" className=\"slideIn\">\n                <Contact />\n                <Experience />\n                <Education />\n            </div>\n        </div>\n    )\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}